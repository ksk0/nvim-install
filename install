#!/usr/bin/zsh

SCRIPT_DIR=${0:a:h}

SCRIPT_DEBUG=0
GLOBAL_INSTALL=0

source $SCRIPT_DIR/lib/core


#############################################
# main functions
#
exec_help(){
	cat <<-EOF

		   ${y}usage:${n}
		      ${bw}install ${n}COMMAND

		   ${y}commands:${n}
		      ${bw}neovim          ${n}- install latest neovim
		      ${bw}register        ${n}- register neovim in "alternatives""
		      ${bw}packages        ${n}- install other programs/modules (nodejs,
		      ${bw}                ${n}  ruby, perl, pynvim, ruby nvim,  ...)
		      ${bw}clipboard       ${n}- install/select new clipboard tool 
		                        even if one already installed

		      ${bw}all             ${n}- run all the above in single run

		   ${y}options:${n}
		      ${bw}--node          ${n}- check for new versions of nodejs
		                        online, even if one is installed
		                        (does nothing on "arch" system)

		      ${bw}--clipbaoard    ${n}- offer selection of of clipboard
		                        tool even if one is installed

		   ${y}note:${n}
		      command names can be abbrevated: neo, cli, ...

	EOF

	exit
}

exec_all(){
	install_packages
	install_neovim
}

exec_neovim(){
	install_neovim
}

exec_register(){
	register_neovim
}

exec_packages(){
	install_packages
}

exec_clipboard(){
	CLIPOARD_KEEEP_EXISTING=0

	zpackage system install clipboard-app
}


#############################################
# package installation functions
#
install_neovim(){
		zpackage system install  neovim-app
		zpackage system register neovim-app
}

register_neovim(){
		zpackage system register neovim-app
}

install_packages(){
	zpackage system packages-select

	local core=(core ${SELECTED_MODULES[(i)system]})
	
	local MODULES=($core ${(o)${(@k)SELECTED_MODULES}:|core})

	local module

	for module in $MODULES; do
		zpackage $module install ${=MODULE_PACKAGES[$module]}
	done

	download_installer
}

download_installer(){
	zpackage system install nvim-installer
}


##############################################################################
# Show some notifications on end of install
#
parse_arguments(){

	############################################################
	# parse command options 
	#
	#   --global -q       - install all modulees as global ones
	#   --debug  -d       - show some debugging output
	#   --node   -n       - check for new versions of node
	#                       online, even if one is installed
	#   --clipbaoard -c   - offer selection of of clipboard
	#                       tool even if one is installed
	#                
	#
	local ARGS

	zparseopts -E -D -A ARGS \
		g d n c \
		-global \
		-debug  \
		-node   \
		-clipboard

	[[ ${+ARGS[-g]} -eq 1 ]] && GLOBAL_INSTALL=1
	[[ ${+ARGS[-d]} -eq 1 ]] && SCRIPT_DEBUG=1
	[[ ${+ARGS[-n]} -eq 1 ]] && NODE_KEEP_EXISTING=0
	[[ ${+ARGS[-c]} -eq 1 ]] && CLIPBOARD_KEEP_EXISTING=0

	[[ ${+ARGS[--global]}    -eq 1 ]] && GLOBAL_INSTALL=1
	[[ ${+ARGS[--debug]}     -eq 1 ]] && SCRIPT_DEBUG=1
	[[ ${+ARGS[--node]}      -eq 1 ]] && NODE_KEEP_EXISTING=0
	[[ ${+ARGS[--clipboard]} -eq 1 ]] && CLIPBOARD_KEEP_EXISTING=0

	local commands=(all neovim packages register clipboard)
	local cmd=(${(M)commands:#${1}*})

	[[ $#cmd -eq 0 ]] && SCRIPT_COMMAND="exec_help"
	[[ $#cmd -eq 1 ]] && SCRIPT_COMMAND="exec_$cmd"
	[[ $#cmd -gt 1 ]] && SCRIPT_COMMAND="exec_help"

	shift 2>/dev/null

	SCRIPT_ARGS=("$@")
}

# check_if_root

parse_arguments $@

# zpackage system install nodejs-module
zpackage system install clipboard-app

exit

$SCRIPT_COMMAND "${SCRIPT_ARGS[@]}"

pkg_notifications_show
