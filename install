#!/usr/bin/zsh

autoload -U regexp-replace

SCRIPT_DIR=${0:a:h}

source $SCRIPT_DIR/src/zfm
source $SCRIPT_DIR/src/common


#############################################
# init functions
#
init_colors(){
	r='[31m'
	g='[32m'
	y='[33m'
	b='[34m'
	m='[35m'
	c='[36m'
	w='[37m'
	n='[0m'

	if [[ $(tput colors) -lt 256 ]]; then
		s='[90m'
	else
		s='[38;5;243m'
	fi

	zterm init
	zmenu init
}


#############################################
# main functions
#
exec_help(){
	init_colors

	cat <<-EOF

		   ${y}usage:${n}
		      install COMMAND

		   ${y}commands:${n}
		      neovim     - install latest neovim
		      cliboard   - install cliboard interface utility
		      packages   - install other programs/modules (nodejs, ruby,
		                   perl, pynvim, ruby nvim, rust, ...)

		      all        - run all the above in single run

		   ${y}note:${n}
		      command names can be abbrevated: neo, cli, ...

	EOF

	exit
}

exec_all(){
	install_packages
	install_neovim
	install_cliboard
}

exec_neovim(){
	install_neovim
}

exec_packages(){
	install_packages
}

exec_cliboard(){
	install_cliboard
}

install_cliboard(){
	local selection
	local menu_prompt=""


	menu_prompt+="[${g}ENTER: ${n}select] "
	menu_prompt+="[${y}CTRL+C: ${n}quit]"

	local pkgs=(
		"xclip;cliboard support on X11"
		"xsel;cliboard support on X11"
		"wl-clipboard;cliboard support on Wayland"
		"   "
		"none"
	)

	alert_msg "${y}Select cliboard support package"

	zmenu select selection\
		--width 60 \
		--header "Pkg;Description" \
		--selected-color "b" \
		--focus 1 \
		--color 'g y n' \
		--align "r l l" \
		--spaces "1 2 2" \
		--no-bottom-line \
		--prompt "$menu_prompt" \
		$pkgs

	echo

	[[ -z $selection ]] && return

	local selected=${pkgs[$selection]%%;*}

	[[ $selected = none ]] && return

	install_pkg system $selected
}

install_packages(){
	load_package_list
	what_to_install

	# typeset -A NEED_PKG
	# NEED_PKG[node]=1

	install_pkg system ${=REQUIRED_PACKAGES[system]}

	local pkg

	for pkg in ${(k)NEED_PKG[(R)1]}; do
		install_pkg $pkg ${=REQUIRED_PACKAGES[$pkg]}
	done
}

what_to_install(){
	local pkg item

	local req_pkgs=(python node rust)
	local conf_pkgs=(${${(k)REQUIRED_PACKAGES}:#system})

	req_pkgs=(${req_pkgs:*conf_pkgs})

	local -U pkgs=($req_pkgs)
	pkgs+=(${${(k)REQUIRED_PACKAGES}:#system})

	local preselected=()

	[[ -n $req_pkgs ]] && preselected=($(for i in {1..$#req_pkgs}; do echo $i; done))

	for i in {1..$#pkgs}; do
		pkg=$pkgs[$i]
		item="$pkg;$REQUIRED_PACKAGES[$pkg]"

		[[ $#item -gt 64 ]] && item="${(r:60:)item} ..."

		pkgs[$i]=$item
	done

	local selection=()
	local menu_prompt=""

	menu_prompt+="[${g}ENTER: ${n}select] "
	menu_prompt+="[${g}CTRL+A: ${n}all] "
	menu_prompt+="[${g}CTRL+N: ${n}none]   "
	menu_prompt+="[${y}CTRL+O: ${n}end] "
	menu_prompt+="[${y}CTRL+C: ${n}quit]"

	zmenu select selection\
		--width 60 \
		--header "Pkg;Modules" \
		--selected-color "b" \
		--selected "$preselected" \
		--multy \
		--focus 1 \
		--color 'g y n' \
		--align "r l l" \
		--spaces "1 2 2" \
		--no-bottom-line \
		--title "${b}Install following groups of packages:"\
		--prompt "$menu_prompt" \
		$pkgs

	echo

	[[ -z $selection ]] && exit

	typeset -gA NEED_PKG

	for i in $selection; do
		NEED_PKG[${pkgs[$i]%;*}]=1
	done
}

#############################################
# package installation functions
#
install_pkg(){
	local type=$1; shift

	for pkg in $@; do
		install_${type}_pkg $pkg
	done
}

install_system_pkg (){
	local todo
	local package=$1

	update_system
	sys_package action todo $package

	if [[ $todo = keep ]] then
		count_action success system $package kept
		return 0
	elif [[ $todo = missing ]] then
		count_action fail system $package missing
		return 1
	elif [[ ${todo%%:*} = old ]] then
		local parts=${(s.:.)todo}
		count_action fail system $package "$parts[2] $parts[3]"
		return 1
	fi

	package=${todo#*:}

	alert_msg "Installing [$OS]" "${package}"

	echo
	sys_package install $package

	count_action $? system $package install

	return $?
}

install_python_pkg(){
	local package=$1

	install_python

	if [[ $PYTHON_BIN -eq 0 ]]; then
		count_action fail python $package "python3 not installed"
		return 1
	fi

	alert_msg "Checking [python]" "$package"

	local has_pkg=$(pip3 list 2>/dev/null | grep "^$package ")

	if [[ -z $has_pkg ]]; then
		clear_screen 4

		alert_msg "Installing [python]" "$package"

		pip3 install $package

		count_action $? python $package install
		echo

	else
		local needs_update=$(pip3 list --outdated 2>/dev/null | grep "^$package ")

		clear_screen 4

		if [[ -n  $needs_update ]]; then
			alert_msg "Upgrading [python]" "$package"

			pip3 install --upgrade $package

			count_action $? python $package upgrade
			echo
		else
			count_action success python $package kept
		fi
	fi
}

install_lua_pkg(){
	local package=$1

	install_luarocks

	if [[ $LUA_BIN -eq 0 ]]; then
		count_action fail lua $package "luarocks not installed"
		return 1
	fi

	alert_msg "Checking [lua]" "$package"

	local local_version=$(
		luarocks --lua-version 5.1 --tree $__LUA_HOME list $package |
		awk -v pkg="${(L)package}" '
			/^$/{found = 0}
			found && /\(installed\)/{print $1}
			tolower($0) == pkg { found = 1}
		' |
		sort -V |
		tail -1
	)

	local repo_version=$(
		luarocks search $package |
		awk -v pkg="${(L)package}" '
			/^$/{found = 0}
			found && /\(src\)/{print $1}
			tolower($0) == pkg { found = 1}
		' |
		sort -V |
		tail -1
	)

	clear_screen 4

	if [[ $local_version = $repo_version ]]; then
		count_action success lua $package kept
		return
	fi

	if [[ -z $local_version ]]; then
		alert_msg "Installing [luarocks]" "$package"
		count_action $? lua $package install
	else
		alert_msg "Upgrading [luarocks]" "$package"
		count_action $? lua $package upgrade
	fi

	echo
	local errors=$(
		luarocks --lua-version 5.1 --tree ${__LUA_HOME} install $package 3>&1 1>&2 2>&3
	)
	echo

	if [[ -n $errors ]]; then
		echo "${y}Errors:${n}"
		echo $errors | sed -e "s/^/${s}   /"
		echo ${n}
	fi
}

install_perl_pkg(){
	local package=$1

	install_perl

	if [[ $PERL_BIN -eq 0 ]]; then
		count_action fail perl $package "perl not installed"
		return 1
	fi

	alert_msg "Checking [perl]" "$package"

	local has_perl5=$([[ -d ~/perl5 ]] && echo "YES")
	local has_pkg=$(perl -I $__PERL_LIB -e "use $package" 2>&1)

	if [[ -n $has_pkg ]]; then
		clear_screen 4

		alert_msg "Installing [perl]" "$package"

		echo
		cpanm --local-lib=$__PERL_HOME -n $package

		count_action $? perl $package install
		echo
	else
		local tar_pkg=${package//::/-}
		local local_version=$(perl -I $__PERL_LIB -M${package} -e 'print $'${package}'::VERSION . "\n";')
		local repo_version=$(cpanm --info $package | grep "/${tar_pkg}.*tar.gz" | sed -e "s:.*/${tar_pkg}-::" -e 's:\.tar\.gz$::')

		clear_screen 4

		if [[ $local_version != $repo_version ]]; then
			alert_msg "Upgrading [perl]" "$package"

			echo
			cpanm --local-lib=$__PERL_HOME -n $package

			count_action $? perl $package upgrade
			echo
		else
			count_action success perl $package kept
		fi
	fi

	# if "perl5" directory has been created
	# delete it
	#
	[[ -z $has_perl5 ]] && [[ -d ~/perl5 ]] && rm -rf ~/perl5
}

install_ruby_pkg(){
	local package=$1

	install_ruby

	if [[ $RUBY_BIN -eq 0 ]]; then
		count_action fail ruby $package "ruby not installed"
		return 1
	fi

	alert_msg "Checking [ruby]" "$package"

	local has_pkg=$(gem info $package | grep "^$package ")

	[[ -d $__RUBY_BIN ]] || mkdir -p $__RUBY_BIN

	if [[ -z $has_pkg ]]; then
		clear_screen 4

		alert_msg "Installing [ruby]" "$package"

		echo
		gem install --user-install -n $__RUBY_BIN $package

		count_action $? ruby $package install
		echo
	else
		local local_version=$(echo $has_pkg | sed -e "s/^${package} (//" -e 's/)//')
		local repo_version=$(gem info $package --remote | grep "^$package " | sed -e "s/^${package} (//" -e 's/)//')

		clear_screen 4

		if [[ $local_version != $repo_version ]]; then
			alert_msg "Upgrading [ruby]" "$package"

			echo
			gem install --user-install -n $__RUBY_BIN $package

			count_action $? ruby $package upgrade
			echo
		else
			count_action success ruby $package kept
		fi
	fi
}


install_node_pkg(){
	local package=$1

	install_node

	if [[ $NODE_BIN -eq 0 ]]; then
		count_action fail node $package "nodejs not installed"
		return 1
	fi

	alert_msg "Checking [npm]" "$package"

	export npm_config_prefix=$__NODE_HOME

	local local_version=$(npm list -g --depth 0 2>/dev/null | grep " ${package}@" | sed -e "s/.* ${package}@//")

	if [[ -z $local_version ]]; then
		clear_screen 4

		alert_msg "Installing [npm]" "$package"

		npm install -g $package

		count_action $? node $package install
		echo
	else
		local repo_version=$(npm view ${package} version)

		clear_screen 4

		if [[ $local_version != $repo_version ]]; then
			alert_msg "Upgrading [npm]" "$package"

			npm install -g $package

			count_action $? node $package upgrade
			echo
		else
			count_action success node $package kept
		fi
	fi

	unset npm_config_prefix
}

install_rust_pkg(){
	local package=$1

	install_rust

	alert_msg "Checking [rust]" "$package"

	local has_pkg=$(cargo install --list | grep "^${package##*::} ")

	if [[ -z $has_pkg ]]; then
		clear_screen 4

		alert_msg "Installing [cargo]" "${package##*::}"

		echo
		cargo install ${package##*::}

		count_action $? cargo $package install
		echo
	else
		local local_version=$(echo $has_pkg | awk '{print $NF}' | sed -e 's/:$//' -e 's/^v//')
		local repo_version=$(cargo search -q ${package##*::} | grep "^${package##*::} " | sed -e 's/^.*= "//' -e 's/".*//')

		clear_screen 4

		if [[ $local_version != $repo_version ]]; then
			alert_msg "Upgrading [cargo]" "${package##*::}"

			echo
			cargo install ${package##*::}

			count_action $? cargo $package upgrade
			echo
		else
			count_action success cargo $package kept
		fi
 fi

	# warning: be sure to add `/home/koske/.local/share/nvim/cargo/bin` to your PATH to be able to run the installed binaries
}

#############################################
# worker functions
#
clear_screen(){
	for i in {1..$1}; do
		echo -n '[A[2K'
	done
}

alert_msg(){
	local action=$1
	local object=$2
	local alert_width=80
	local void

	[[ -n $object ]] && action="${action}:"
	
	echo 
	echo "${g}${(l:$alert_width::#:)void}"
	echo "${g}# ${w}${action}${y} ${object}${n}"
	echo "${g}${(l:$alert_width::#:)void}${n}"
}

register_neovim_app(){
	local app=$1
	local link=$2
	local action=$3
	local explicite

	local APP_PATH=$(which $app)

	local registered=$(sudo update-alternatives --list ${link} | grep "^${APP_PATH}$")

	[[ -n $registered ]] && return

	alert_msg "Registering \"$app\" as ${y}${link}${w}"

	echo
	echo
	echo -n "[1A"
	echo -n "Do you want to register \"neovim\" as ${y}${link}${n} "

	if [[ $action = Y ]]; then
		echo -n "[Y/n]: "
		explicite="n"
	else
		echo -n "[y/N]: "
		explicite="y"
	fi

	read yesno

	[[ ${(L)yesno}  = $explicite ]] && [[ $action = Y ]] && return
	[[ ${(L)yesno} != $explicite ]] && [[ $action = N ]] && return

	echo
	sudo update-alternatives --install /usr/bin/${link} ${link} "${APP_PATH}" 110
	sudo update-alternatives --set ${link} "${APP_PATH}"
}


yesno_question(){
	local prompt=$1
	local default=${(L)2}

	local yesno

	echo
	while true; do
		echo -n '[1A[2K'
		echo -n "${prompt} "
		read yesno

		if [[ -z $yesno ]] || [[ ${(L)yesno} = y ]] || [[ ${(L)yesno} = n ]] then
			echo 
			break
		fi
	done

	[[ $default = n ]] && [[ ${(L)yesno} != y ]] && return 1
	[[ $default = y ]] && [[ ${(L)yesno} != n ]] && return 0

	[[ ${(L)yesno} = y ]] && return 0
	[[ ${(L)yesno} = n ]] && return 1

	return 1
}

##############################################################################
# Show some notifications on end of install
#
show_notifications(){
	local void
	local txt

	if [[ -z $INSTALLED_PACKAGES ]] && [[ -z $FAILED_PACKAGES ]]; then
		alert_box --expand "No packagages were installed !!!"
	fi

	local last_type

	if [[ -n $INSTALLED_PACKAGES ]]; then
		last_type=""

		{
			echo "Following packages were installed/upgraded/kept:"
			echo
			printf "${n}%-10s %-25s %s\n" "Type" "Package" "Action"
			echo ${(l:60::-:)txt}

			for package in ${(O)INSTALLED_PACKAGES}; do
				local parts=("${(s:;:)package}")

				[[ -n $last_type ]] && [[ $last_type != $parts[1] ]] && echo

				echo -n "${y}${(r:10:)parts[1]}${n} "
				echo -n "${n}${(r:25:)parts[2]}${n} "
				echo -n "${b}${parts[3]}${n}"
				echo

				last_type=$parts[1]
			done

		} | sed -e 's/^/   /' | alert_box --left --expand
	fi

	if [[ -n $FAILED_PACKAGES ]]; then
		last_type=""

		{
			echo "We failed to install following packages:"
			echo
			printf "${n}%-10s %-25s %-25s\n" "Type" "Package" "Reason"
			echo "${(l:60::-:)void}"

			for pkg in ${(O)FAILED_PACKAGES}; do
				local parts=("${(s:;:)pkg}")

				[[ -n $last_type ]] && [[ $last_type != $parts[1] ]] && echo

				echo -n "${y}${(r:10:)parts[1]}${n} "
				echo -n "${n}${(r:25:)parts[2]}${n} "
				echo -n "${b}${parts[3]}${n}"
				echo

				last_type=$parts[1]
			done

			echo
		} | sed 's/^/   /' | alert_box --expand --left
	fi

}

alert_box(){
	local width=80
	local void
	local align=C
	local expand=0
	local border="#"

	############################################################
	# parse command options 
	#   --left       - text aligment
	#   --right      -    -||-
	#   --center     -    -||-
	#
	#   --expand     - add empty line before, and after text
	#
	local ARGS BORDER WIDTH

	zparseopts -E -D -A ARGS \
		-left \
		-right \
		-center \
		-expand \
		-width:=WIDTH \
		-border:=BORDER

	[[ ${+ARGS[--left]}   -eq 1 ]] && align=L
	[[ ${+ARGS[--right]}  -eq 1 ]] && align=R
	[[ ${+ARGS[--center]} -eq 1 ]] && align=C
	[[ ${+ARGS[--expand]} -eq 1 ]] && expand=1

	[[ -n $BORDER ]] && border=${${BORDER[2]}[1]}
	[[ -n $WIDTH  ]] && width=${WIDTH[2]}

	local lines=("$@")
	local bline=${${(l:$width::.:)void}//./${border}}

	[[ -z $lines ]] && lines=("${(@f)$(cat)}")

	echo 
	echo "${g}${bline}${n}"

	[[ $expand -eq 1 ]] && echo "${g}${border}${(l:$((width - 2)):: :)void}${border}${n}"

	local text
	local len
	local left
	local right

	for line in "${(@)lines}"; do
		text=$line

		# strip ansi sequence
		#
		strip_ansi_escape text

		len=$#text

		case $align in 
			C)
				left=$(((width - 2 - len) / 2))
				right=$((width - 2 - len - left))
				;;
			L)
				left=0
				right=$((width - 2 - len ))
				;;
			R)
				right=0
				left=$((width - 2 - len ))
				;;
		esac

		echo -n "${g}${border}${(l:$left:: :)void}${n}"
		echo -n "${y}${line}${n}"
		echo -n "${g}${(l:$right:: :)void}${border}${n}"
		echo

	done

	[[ $expand -eq 1 ]] && echo "${g}${border}${(l:$((width - 2)):: :)void}${border}${n}"

	echo "${g}${bline}${n}"
	echo
}

strip_ansi_escape(){
	if [[ -o RE_MATCH_PCRE ]]; then
		eval "regexp-replace $1 '(\x9B|\x1B\[)[0-9:;<>=?]*[ -\/]*[@-~]' ''"
	else
		setopt RE_MATCH_PCRE
		eval "regexp-replace $1 '(\x9B|\x1B\[)[0-9:;<>=?]*[ -\/]*[@-~]' ''"
		unsetopt RE_MATCH_PCRE
	fi
}

parse_arguments(){
	local commands=(all neovim packages cliboard)
	local cmd=(${(M)commands:#${1}*}) 

	[[ $#cmd -eq 0 ]] && SCRIPT_COMMAND="exec_help"                         
	[[ $#cmd -eq 1 ]] && SCRIPT_COMMAND="exec_$cmd"                         
	[[ $#cmd -gt 1 ]] && SCRIPT_COMMAND="exec_help"

	shift 2>/dev/null

	SCRIPT_ARGS=("$@")
}

init_colors

check_if_root
check_linux_flavour

parse_arguments $@

# install_node
# exit

$SCRIPT_COMMAND "${SCRIPT_ARGS[@]}"

show_notifications
