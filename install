#!/usr/bin/zsh

SCRIPT_DIR=${0:a:h}

SCRIPT_DEBUG=0
GLOBAL_INSTALL=0
HAND_PICK=0

source $SCRIPT_DIR/lib/core


#############################################
# main functions
#
exec_help(){
	cat <<-EOF

		   ${by}usage:${n}
		      ${bw}install ${n}COMMAND

		   ${by}commands:${n}
		      ${bw}neovim          ${n}- install latest neovim
		      ${bw}register        ${n}- register neovim in "alternatives""
		      ${bw}packages        ${n}- install other programs/modules (nodejs,
		      ${bw}                ${n}  ruby, perl, pynvim, ruby nvim,  ...)

		      ${bw}all             ${n}- run all the above in single run

		      ${bw}clipboard       ${n}- install/select new clipboard tool 
		                        even if one already installed
		      ${bw}node            ${n}- install/select new version of nodejs
		                        even if one already installed


		   ${by}options:${n}
		      ${bw}--select        ${n}- manualy select packages you want 
		                        to install, for each group of
		                        packages
		      ${bw}--node          ${n}- check for new versions of nodejs
		                        online, even if one is installed
		                        (does nothing on "arch" system)

		      ${bw}--clipbaoard    ${n}- offer selection of of clipboard
		                        tool even if one is installed

		   ${by}note:${n}
		      command names can be abbrevated: neo, cli, pac, ...

	EOF

	exit
}

exec_all(){
	install_packages
	install_neovim
}

exec_neovim(){
	install_neovim
}

exec_register(){
	register_neovim
}

exec_packages(){
	install_packages
}

exec_clipboard(){
	CLIPBOARD_KEEP_EXISTING=0

	zpackage system install clipboard-app
}

exec_nodejs(){
	NODE_KEEP_EXISTING=0

	zpackage system install nodejs
}

#############################################
# package installation functions
#
install_neovim(){
		zpackage system install  neovim-app
		zpackage system register neovim-app
}

register_neovim(){
		zpackage system register neovim-app
}

install_packages(){
	zpackage system packages-select

	local core=(core ${SELECTED_MODULES[(i)system]})
	local MODULES=($core ${(o)${(@k)SELECTED_MODULES}:|core})

	local module
	local packages

	for module in $MODULES; do
		if [[ $HAND_PICK -eq 0 ]] || [[ $module = core ]]; then
			packages=(${=MODULE_PACKAGES[$module]})
		else
			select_packages packages $module
		fi

		# typeset -p packages
		# continue

		[[ -z $packages ]] && continue

		for package in $packages; do
			zpackage $module install $package
		done
	done

	download_installer
}

download_installer(){
	zpackage system install nvim-installer
}


##############################################################################
# select individual packages
#
select_packages(){
	local __store=$1
	local __module=$2

	local __packages=(${(o)${=MODULE_PACKAGES[$__module]}})

	eval "$__store=()"

	#####################################################
	# Create menu
	#
	local __menu_prompt=""

	__menu_prompt+="[${g}ENTER: ${n}select] "
	__menu_prompt+="[${g}CTRL+A: ${n}all] "
	__menu_prompt+="[${g}CTRL+N: ${n}none]   "
	__menu_prompt+="[${y}CTRL+O: ${n}end] "
	__menu_prompt+="[${y}CTRL+C: ${n}quit]"

	alert_msg "Select package(s) to install from group" $__module

	local selection=()
	local lines=$(($#__packages + 9))

	zmenu select selection\
		--width 60 \
		--header "Packages" \
		--selected-color "b" \
		--multy \
		--focus 1 \
		--color 'g y' \
		--align "r l" \
		--spaces "1 2" \
		--no-bottom-line \
		--prompt "$__menu_prompt" \
		$__packages || {clear_screen $lines; return}

	local __selected_packages=()

	if [[ -n $selection ]]; then
		for i in $selection; do
			__selected_packages+=(${__packages[$i]})
		done
	fi

	clear_screen $lines

	local __replicate=$(
		typeset -p __selected_packages |
			sed -e 's/.*__selected_packages=//'
	)

	eval "$__store=$__replicate"
}


##############################################################################
# Show some notifications on end of install
#
parse_arguments(){

	############################################################
	# parse command options 
	#
	#   --select          - hand pick packages to install
	#   --global -q       - install all modulees as global ones
	#   --debug  -d       - show some debugging output
	#   --node   -n       - check for new versions of node
	#                       online, even if one is installed
	#   --clipbaoard -c   - offer selection of of clipboard
	#                       tool even if one is installed
	#                
	#
	local ARGS

	zparseopts -E -D -A ARGS \
		g d n c \
		-global \
		-debug  \
		-node   \
		-select \
		-clipboard

	[[ ${+ARGS[-g]} -eq 1 ]] && GLOBAL_INSTALL=1
	[[ ${+ARGS[-d]} -eq 1 ]] && SCRIPT_DEBUG=1
	[[ ${+ARGS[-n]} -eq 1 ]] && NODE_KEEP_EXISTING=0
	[[ ${+ARGS[-c]} -eq 1 ]] && CLIPBOARD_KEEP_EXISTING=0

	[[ ${+ARGS[--select]}    -eq 1 ]] && HAND_PICK=1
	[[ ${+ARGS[--global]}    -eq 1 ]] && GLOBAL_INSTALL=1
	[[ ${+ARGS[--debug]}     -eq 1 ]] && SCRIPT_DEBUG=1
	[[ ${+ARGS[--node]}      -eq 1 ]] && NODE_KEEP_EXISTING=0
	[[ ${+ARGS[--clipboard]} -eq 1 ]] && CLIPBOARD_KEEP_EXISTING=0

	local commands=(all neovim packages register clipboard nodejs)
	local cmd=(${(M)commands:#${1}*})

	[[ $#cmd -eq 0 ]] && SCRIPT_COMMAND="exec_help"
	[[ $#cmd -eq 1 ]] && SCRIPT_COMMAND="exec_$cmd"
	[[ $#cmd -gt 1 ]] && SCRIPT_COMMAND="exec_help"

	shift 2>/dev/null

	SCRIPT_ARGS=("$@")
}

# check_if_root

parse_arguments $@

$SCRIPT_COMMAND "${SCRIPT_ARGS[@]}"

pkg_notifications_show
