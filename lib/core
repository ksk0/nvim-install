#!/usr/bin/zsh

source $SCRIPT_DIR/lib/zfm


###############################################################################
# init functions
#
core_init(){
	init_colors
	linux_flavour
	set_margine 0

	############################################
	# source common and OS package functions
	#
	local file

	source $SCRIPT_DIR/lib/pkg/core

	for file in $SCRIPT_DIR/lib/pkg/generic/*; do
		source $file
	done

	for file in $SCRIPT_DIR/lib/pkg/$OS/*; do
		source $file
	done

	zterm init
	zmenu init
}

init_colors(){
	r='[31m'
	g='[32m'
	y='[33m'
	b='[34m'
	m='[35m'
	c='[36m'
	w='[37m'
	n='[0m'

	br='[31;1m'
	bg='[32;1m'
	by='[33;1m'
	bb='[34;1m'
	bm='[35;1m'
	bc='[36;1m'
	bw='[37;1m'

	if [[ $(tput colors) -lt 256 ]]; then
		s='[90m'
	else
		s='[38;5;243m'
	fi
}

linux_flavour(){
	[[ -n $OS ]] && return 

	if [[ -f /etc/arch-release ]] then
		OS=arch

	elif [[ -f /etc/redhat-release ]] then
		OS=redhat
		OS=""

	elif [[ -f /etc/debian_version ]] then
		OS=debian

	elif [[ -f /etc/os-release ]] then
		OS=$(source /etc/os-release; echo ${ID_LIKE% *})

		[[ $OS = suse ]] || OS=""
		OS=""

	fi

	DISTRO=$(
		cat /etc/os-release |
		awk -F'=' '$1 == "ID" {print $2}'
	)

	[[ -n $OS ]] && return 0

	alert_box --expand "${y}Unable to determin Linux flavour!${n}"

	exit 1
}

sudo_init(){
	sudo -nv 2>/dev/null && return

	echo
	echo
	sudo -p '[2A[2K[sudo] password for %p: ' -v

	local retval=$?

	if [[ $retval -ne 0 ]]; then
		clear_screen 2

		{
			echo
			echo "   sudo: ${r}3 incorrect password attempts !!!${n}"
			echo
		} >&2
	else
		clear_screen 1
	fi

	return $retval
}

sudo_cmd(){
	sudo_init || return 1

	sudo "$@"
	return $?
}

sudo_global(){
	if [[ $GLOBAL_INSTALL -eq 1 ]]; then
		sudo_init || return 1

		sudo "$@"
		return $?
	fi

	"$@"
	return $?
}



###############################################################################
# messaging functions
#
clear_screen(){
	[[ $SCRIPT_DEBUG -eq 1 ]] && return

	# local ahh

	# echo -n "Press <ENTER> (1): "
	# read ahh
	# echo -n '[A[2K'

	local i

	for i in {1..$1}; do
		echo -n '[A[2K'
	done

	# echo -n "Press <ENTER> (2): "
	# read ahh
	# echo -n '[A[2K'
}

yesno_question(){
	local prompt=$1
	local default=${(L)2}

	local yesno

	echo
	while true; do
		echo -n '[1A[2K'
		echo -n "   ${prompt} "
		read yesno

		if [[ -z $yesno ]] || [[ ${(L)yesno} = y ]] || [[ ${(L)yesno} = n ]] then
			echo 
			break
		fi
	done

	[[ $default = n ]] && [[ ${(L)yesno} != y ]] && return 1
	[[ $default = y ]] && [[ ${(L)yesno} != n ]] && return 0

	[[ ${(L)yesno} = y ]] && return 0
	[[ ${(L)yesno} = n ]] && return 1

	return 1
}

set_margine(){
	__CORE_MARGINE=$1
}

alert_msg(){
	local width=80
	local margine=${__CORE_MARGINE:-3}
	local void

	local ARGS MARGINE

	zparseopts -E -D -A ARGS \
		-margine:=MARGINE

	[[ -n $MARGINE ]] && margine=${MARGINE[2]}

	local action=$1
	local object=$2
	local mprefix=${(l:${margine}:: :)void}

	width=$((width - margine))

	[[ -n $object ]] && action="${action}:"

	echo 
	echo "${mprefix}${g}${(l:$width::#:)void}"
	echo "${mprefix}${g}# ${w}${action}${y} ${object}${n}"
	echo "${mprefix}${g}${(l:$width::#:)void}${n}"
}

alert_box(){
	local width=80
	local void
	local align=C
	local expand=0
	local border="#"
	local margine=$__CORE_MARGINE
	local offset=0
	local usepar=0

	############################################################
	# parse command options 
	#   --left       - text aligment
	#   --right      -    -||-
	#   --center     -    -||-
	#
	#   --expand     - add empty line before, and after text
	#
	local ARGS BORDER WIDTH MARGINE OFFSET

	zparseopts -E -D -A ARGS \
		-par \
		-left \
		-right \
		-center \
		-justify \
		-expand \
		-offset:=OFFSET\
		-margine:=MARGINE \
		-width:=WIDTH \
		-border:=BORDER

	[[ ${+ARGS[--par]}     -eq 1 ]] && usepar=1
	[[ ${+ARGS[--left]}    -eq 1 ]] && align=L
	[[ ${+ARGS[--right]}   -eq 1 ]] && align=R
	[[ ${+ARGS[--center]}  -eq 1 ]] && align=C
	[[ ${+ARGS[--justify]} -eq 1 ]] && align=J
	[[ ${+ARGS[--expand]}  -eq 1 ]] && expand=1

	[[ -n $BORDER  ]] && border=${${BORDER[2]}[1]}
	[[ -n $WIDTH   ]] && width=${WIDTH[2]}
	[[ -n $OFFSET  ]] && offset=${OFFSET[2]}
	[[ -n $MARGINE ]] && margine=${MARGINE[2]}

	width=$((width - margine))


	local lines=("$@")
	local bline=${${(l:$width::.:)void}//./${border}}
	local mprefix

	width=$((width - 2))
	
	mprefix=${(l:${margine}:: :)mprefix}

	local par=($(
		if [[ $usepar -eq 0 ]]; then
			echo cat

		elif hash par 2>/dev/null; then
			local text_width

			if [[ $align = C ]]; then
				text_width=$((width - offset * 2 - 1))
			else
				text_width=$((width - offset - 1))
			fi

			case $align in
				L) echo "par -f1 -w${text_width}";;
				R) echo "par -f1 -w${text_width}";;
				J) echo "par -j1 -w${text_width}";;
				C) echo "cat";;
			esac

		else
			echo cat

		fi
	))

	[[ -z $lines ]] && lines=("${(@f)$(cat | $par)}")

	echo 
	echo "${mprefix}${g}${bline}${n}"

	[[ $expand -eq 1 ]] && echo "${mprefix}${g}${border}${(l:$width:: :)void}${border}${n}"

	local text
	local len
	local left
	local right
	local line

	for line in "${(@)lines}"; do
		text=$line

		# strip ansi sequence
		#
		strip_ansi_escape text

		len=$#text

		case $align in 
			C)
				left=$(((width - len + 2*offset) / 2))
				right=$((width - len - offset - left))
				;;
			L)
				left=$offset
				right=$((width - len - offset))
				;;
			R)
				right=$offset
				left=$((width - len - offset))
				;;
		esac

		echo -n "$mprefix"
		echo -n "${g}${border}${(l:$left:: :)void}${n}"
		echo -n "${y}${line}${n}"
		echo -n "${g}${(l:$right:: :)void}${border}${n}"
		echo

	done

	[[ $expand -eq 1 ]] && echo "${mprefix}${g}${border}${(l:$width:: :)void}${border}${n}"

	echo "${mprefix}${g}${bline}${n}"
	echo
}

strip_ansi_escape(){
	if [[ -o RE_MATCH_PCRE ]]; then
		eval "regexp-replace $1 '(\x9B|\x1B\[)[0-9:;<>=?]*[ -\/]*[@-~]' ''"
	else
		setopt RE_MATCH_PCRE
		eval "regexp-replace $1 '(\x9B|\x1B\[)[0-9:;<>=?]*[ -\/]*[@-~]' ''"
		unsetopt RE_MATCH_PCRE
	fi
}

core_init
