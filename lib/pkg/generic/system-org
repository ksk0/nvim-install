#!/usr/bin/zsh

BIN_DIR=/usr/local/bin
UPGRADED=0
INSTALLED_PACKAGES=()
FAILED_PACKAGES=()
AUTO_REMOVE_PKGS=""

check_if_root(){
	[[ $EUID -ne 0 ]] && return
	[[ -z $SUDO_USER ]] && return

	cat <<-EOF
		${y}
		   Run this script as regular user. DO NOT use sudo!
		${n}
	EOF

	exit 1
}

check_linux_flavour(){
	[[ -n $OS ]] && return 

	if [[ -f /etc/arch-release ]] then
		OS=arch
	elif [[ -f /etc/redhat-release ]] then
		OS=redhat
		OS=""
	elif [[ -f /etc/debian_version ]] then
		OS=debian
	elif [[ -f /etc/os-release ]] then
		OS=$(source /etc/os-release; echo ${ID_LIKE% *})

		[[ $OS = suse ]] || OS=""
		OS=""
	fi

	[[ -n $OS ]] && source $SCRIPT_DIR/src/$OS && return

	alert_box --expand "${y}Unable to determin Linux flavour!${n}"

	exit 1
}

load_package_list(){
	typeset -gA REQUIRED_PACKAGES

	REQUIRED_PACKAGES=("${(@f)$(
		cat $SCRIPT_DIR/packages |

		sed -E \
			-e 's/#.*//' \
			-e 's/^\s+//' \
			-e 's/\s+$//' \
			-e 's/\s+/ /' \
			-e 's/\[\s+/\[/' \
			-e 's/\s+\]/\]/' |

		grep -v '^$'|

		awk '
			function print_group(){
				if (packages != ""){
					print group
					print(substr(packages,2))
				}
			}

			/^\[[^]]+\]$/{
				if (group != ""){
					print_group()
				}

				sub(/\[/,"",$0)
				sub(/\]/,"",$0)

				group = $0
				packages=""
				next
			}

			{packages = packages " " $0}

			END{
				print_group()
			}
		'
	)}")

	local -U system_pkgs=(${=REQUIRED_PACKAGES[system]} ${=REQUIRED_PACKAGES[$OS]})

	REQUIRED_PACKAGES[system]=$system_pkgs

	unset "REQUIRED_PACKAGES[$OS]"
}

select_package(){
	local __storage=$1; shift
	local __selection
	local __prompt=""

	__prompt+="[${g}ENTER: ${n}select]   "
	__prompt+="[${g}CTRL+C: ${n}quit]"

	zmenu select __selection\
		--width 60 \
		--focus 1 \
		--color 'g b' \
		--align 'r l' \
		--spaces "1" \
		--no-bottom-line \
		--title "${b}Select package to install:"\
		--prompt "$__prompt" \
		"$@"

	eval "${__storage}=${(P)__selection}"
}

