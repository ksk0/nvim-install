#!/usr/bin/zsh

__CORE_PACKAGES_OS=(par)

system_pkg_snapshot(){
	apt list --installed 2>/dev/null |
		grep -v 'Listing...' |
		awk -F'/' '{print $1}'
}

system_pkg_version(){
	local pkg=$1
	local vtype=$2
	local pkg_version

	if [[ $vtype = installed ]]; then
		pkg_version=$(
			dpkg -l $pkg 2>/dev/null |
			grep '^i' | awk '{print $3}' 
		)


	else
		pkg_version=$(
			apt show $pkg 2>/dev/null |
			grep '^Version:' | sed -e 's/Version: //'
		)
	fi

	pkg_version_normalize $pkg_version
}

system_pkg_doinstall(){
	local width=$(tput cols)
	local result

	if [[ $width -gt 80 ]] then
		stty cols 80
	fi

	sudo_cmd apt-get install --yes $1
	result=$?

	if [[ $width -gt 80 ]] then
		stty cols $width
	fi

	return $result
}

system_pkg_uninstall(){
	local pkg=$1

	local pkg_present=$(
		dpkg -l $pkg 2>/dev/null | grep '^i' 
	)

	[[ -z $pkg_present ]] && return 0

	local autoremove=($(
		apt-get -s remove $pkg |
		awk '
			/^[^ \t]+/ {flag = 0}
			flag {print}
			/automatically installed and .* longer required:/ {flag = 1}
		'
	))

	sudo_cmd apt-get --yes remove $pkg || return 1

	if [[ -n $autoremove ]]; then
		 sudo_cmd apt-get --yes autoremove || return 1
	fi

	return 0
}

system_pkg_upgrade(){
	[[ $SYSTEM_UPGRADED -eq 1 ]] && return 0 || SYSTEM_UPGRADED=1

	cat <<-EOF | alert_box --expand
		${n}Before installing/updating any packages,
		${n}system should be upgraded.

		We can update and if necesary upgrade within the script.
	EOF

	yesno_question "Do you want to update the package database [Y/n]:" Y

	if [[ $? -eq 0 ]] && system_pkg_update

	local test_run=$(apt-get -s upgrade)

	local upgradable=($(
		echo $test_run |
		awk '
			/^[^ \t]+/ {flag = 0}
			flag {print}
			/The following packages will be upgraded:/ {flag = 1}
		'
	))

	local keptback=($(
		echo $test_run |
		awk '
			/^[^ \t]+/ {flag = 0}
			flag {print}
			/The following packages have been kept back:/ {flag = 1}
		'
	))

	local autoremove=($(
		echo $test_run |
		awk '
			/^[^ \t]+/ {flag = 0}
			flag {print}
			/automatically installed and .* longer required:/ {flag = 1}
		'
	))

	local modified=0

	if [[ -z $upgradable ]]; then
		echo
		alert_box --expand "No package(s) need upgrade !!!"

		return 0

	else
		system_pkg_upgrade_report \
			"There are package(s) that need upgrade:" \
			"" "${(@)upgradable}"

		# alert_box --expand "Your system needs upgrade !!!"

		if yesno_question "Do you want to upgrades the system [y/N]:" N; then
			alert_msg "${y}Upgrading system packages ..."
			echo

			sudo_cmd apt-get upgrade -qq --yes
			echo

			modified=1
		else
			exit
		fi

	fi

	if [[ -n $keptback ]]; then
		# {
		# 	echo "Following packages are kept back:"
		# 	echo
		# 	echo ${(j:\n:)${(@)keptback/#/   ${n}}}${y}
		# 	echo
		# 	echo "They have to be installed manualy!"
		# } | sed -e 's/^/   /' | alert_box --expand --left

		system_pkg_upgrade_report \
			"Following packages are kept back:" \
			"They have to be installed manualy!" \
			"${(@)keptback}"

		if yesno_question "Do you want to install kept back packages [y/N]:" N; then
			alert_msg "${y}Installing kept back packages ..."
			echo

			sudo_cmd apt-get install -qq --yes $keptback
			echo

			modified=1
		else
			exit
		fi
	fi

	if [[ -n $autoremove ]]; then
	system_pkg_upgrade_report \
		"Following packages can be removed, since they are not needed:" \
		"To remove them run:\n   ${n}apt autoremove${y}" \
		"${(@)autoremove}"

		# {
		# 	echo "Following packages can be removed, since they are not needed:"
		# 	echo
		# 	echo ${(j:\n:)${(@)autoremove/#/   ${n}}}
		# 	echo
		# 	echo "To remove them run:"
		# 	echo "   ${n}apt autoremove${y}"
		# } | sed -e 's/^/   /' | alert_box --expand --left
	fi


	if [[ $modified -eq 1 ]]; then
		alert_box --expand "Run installation script again!"

		echo
		exit
	fi

	return 0
}

system_pkg_upgrade_report(){
	local header=$1; shift
	local footer=$1; shift
	local packages=("$@")

	if [[ $#packages -le 10 ]]; then
		package_list=("${(@)packages}")
	else
		local extra_pkgs=$(($#packages - 10))
		package_list=("${(@)packages[1,10]}")
		package_list+=("...")
		package_list+=("${y}and $extra_pkgs more !!!${n}")
	fi

	local len=$#header

	{
		echo "$header"
		echo ${(l:$len::-:)void}

		# for package in $package_list; do
		echo ${(j:\n:)${(@)package_list/#/${n}}}
		# done

		if [[ -n $footer ]]; then
			echo
			echo $footer
		fi

	}  | alert_box --left --offset 3 --expand
}

system_pkg_update(){
	alert_msg "Updating" "system package list"
	echo

	sudo_init || return 1

	sudo_cmd apt-get -q update >/dev/null &

	zprogress wait $! "Downloading package list"
}
