#!/usr/bin/zsh

###############################################################################
# packaging functions
#
SYSTEM_UPGRADED=0
INSTALLED_PACKAGES=()
FAILED_PACKAGES=()
AUTO_REMOVE_PKGS=""
PACKAGE_LIST=$SCRIPT_DIR/packages

__DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
__NVIM_SHARE=$__DATA_HOME/nvim
__NVIM_BRICKS=$__NVIM_SHARE/bricks

typeset -gA __INSTALLED_PKGS
typeset -gA __FAILED_PKGS
typeset -gA MULTY_VERSION_PACKAGE

# __REQUIRED_MODULES=(python node rust)
__REQUIRED_MODULES=(system)


###############################################################################
# main packaging proxy function
#
zpackage(){

	##################################################################
	# Arguments to function:
	#  
	#   1: module
	#   2: action
	#   @: packages
	#
	# Possible modules are:
	#   system   - system/os packages
	#   python 
	#   perl
	#   node
	#   rust
	#   ruby
	#   lua
	#
	# Possible actions are:
	#   setup       - do setup of module
	#   check       - check if package is installed
	#   count       - count action(s) success/failure
	#   action      - what to do with given package
	#   version     - get installed or available
	#                 version of package
	#   provides    - get list of packages which
	#                 provide this generic package
	#   install     - install package
	#   doinstall   - actual installation of package
	#   clean       - do cleanup tasks after "action"
	#                 has been define, and no "install"
	#                 nor "update" has been executed
	#                 i.e. if you have downloaded something
	#                 remove it here
	#   preinstall  - do tasks just before installation
	#   postinstall - do tasks just before installation
	#   uninstall   - uninstall package
	#
	#

	##################################################################
	# Core, module specific and package specific functions
	#  
	# Name of the function for specific "module" and "command" is
	# generated as:
	#
	#     ${module}_pkg_${action}
	#
	# i.e.: 
	#
	#    system_pkg_install or
	#    python_pkg_check
	# 
	#
	#
	# that is "module specific" function. For some package specific
	# functions could be used/present. Name of such function is
	# generated as:
	#
	#     ${module}_pkg__${action}_${package}
	#
	# i.e.: 
	#
	#    system_pkg_install_lua or
	#    python_pkg_check_pip
	#
	#
	#
	# that is "package specific" function. There are also "core"
	# functions. They are generic, and common to all modules. Their
	# name is generated as:
	#
	#     pkg_${action}
	#
	# i.e.: 
	#
	#    pkg_install or
	#    pkg_check
	#
	# 
	# If present, "zpackage" will choose to execute the function
	# with highiest precedance. Order of precedance is as folows:
	#
	#   1. package specific function
	#   2. moduel specific function
	#   3. core function
	#
	# If no function is found, we return error. Variable "ERROR_MESSAGE"
	# should be set with error message.
	#
	#

	##################################################################
	# Arguments to functions:
	#  
	#  In general terms, after "module" and "action" are extracted
	#  from arguments list, what is left is list of packages. "zpackage"
	#  will go through every arguments left (list of package) and call
	#  specific function (core, module or packages specific) with
	#  single argument: package name.
	#
	#  Exception to above rule are commands:
	#
	#    action
	#    version
	#    count
	#    provides
	#    doinstall
	#    
	#  When callling specific function, all arguments will be "transfarred"
	#  to the function in single run. There will be no looping through
	#  rest of the arguments
	#    

	##################################################################
	# Precede each variable with "__" to create quasi private variable
	# not to interfere with content of variables which will possible
	# be set by called function (such as "action" command)


	local __module=$1; shift
	local __action=${1//-/_}
	local __group=${1%%-*}; shift
	local __args=("$@")

	[[ -z $__args ]] && __args=("dummy")
	[[ $__module = core ]] && __module="system"

	local __core_cmd="pkg_${__action}"
	local __module_cmd="${__module}_pkg_${__action}"
	local __package
	local __arguments
	local __repetitive=1

	# echo "ARGS: " $__args
	# echo "CORE CMD: $__core_cmd"
	# echo "MODULE CMD: $__module_cmd"

	#######################################
	# for "action", "version" and "count"
	# return imidately.
	#
	case $__group in
		action)    __repetitive=0;;
		version)   __repetitive=0;;
		count)     __repetitive=0;;
		provides)  __repetitive=0;;
		doinstall) __repetitive=0;;
	esac

	for __package in $__args; do

		#######################################
		# for "action", "version" and "count"
		# pass all arguments
		#
		case $__group in
			action)    __arguments=("$@");;
			version)   __arguments=("$@");;
			count)     __arguments=("$@");;
			provides)  __arguments=("$@");;
			doinstall) __arguments=("$@");;
			*)         __arguments=($__package);;
		esac

		# to form pakges cmd name, replace "-" with "_"
		# and remove "version" part from package name
		# i.e. ${package%/*}
		#
		local __package_cmd="${__module_cmd}_${${__package//-/_}%/*}"

		# echo "PACKAGE CMD: $__package_cmd"

		# check if there is package specific function
		# if yes, execute it
		#
		if typeset -f $__package_cmd >/dev/null; then
			# echo $__package_cmd $__arguments || return 1
			$__package_cmd $__arguments || return 1
			[[ $__repetitive -eq 0 ]]   && return 0  # exit if single instance

			continue
		fi

		# check if there is module specific function
		# if yes, execute it
		#
		if typeset -f $__module_cmd >/dev/null; then
			# echo $__module_cmd $__arguments || return 1
			$__module_cmd $__arguments || return 1
			[[ $__repetitive -eq 0 ]]  && return 0  # exit if single instance

			continue
		fi

		# check if there is core function
		# if yes, execute it
		#
		if typeset -f $__core_cmd >/dev/null; then
			# echo $__core_cmd $__module $__arguments || return 1
			$__core_cmd $__module $__arguments || return 1
			[[ $__repetitive -eq 0 ]] && return 0  # exit if single instance

			continue
		fi
	done

	return 0
}


############################
# core function: install
#
pkg_install(){
	local module=$1; shift
	local pkg=$1; shift
	local package=${pkg%%/*}
	local __todo__

	if ! zpackage $module setup; then
		zpackage $module count fail $module $package "$module not set up"
		return 1
	fi

	echo "-- get action --"
	zpackage $module action $pkg __todo__

	echo "action: $__todo__"

	if [[ $__todo__ = keep ]] then
		zpackage $module count success $module $pkg kept
		zpackage $module clean $pkg

		return 0
	elif [[ $__todo__ = skipp ]] then
		zpackage $module count fail $module $pkg skipped
		zpackage $module clean $pkg

		return 1
	elif [[ $__todo__ = missing ]] then
		zpackage $module count fail $module $pkg missing
		zpackage $module clean $pkg

		return 1
	elif [[ ${__todo__%%:*} = old ]] then
		local parts=${(s.:.)__todo__}

		zpackage $module count fail $module $pkg "$parts[2] $parts[3]"
		zpackage $module clean $pkg

		return 1
	fi

	local action=${__todo__%%:*}
	local actioning

	if [[ $action = install ]]; then
		actioning="Installing"
	else
		actioning="Updating"
	fi

	pkg=${__todo__#*:}

	alert_msg "$actioning [$module]" "${pkg%/*}"
	echo

	zpackage $module preinstall $pkg

	local width=$(tput cols)

	[[ $width -gt 80 ]] && stty cols 80

	zpackage $module doinstall  $pkg $action
	local result=$?

	[[ $width -gt 80 ]] && stty cols $width


	zpackage $module count $result $module $package $action
	zpackage $module postinstall $pkg

	return $result
}


###############################################################################
# package(s) and group selection/definition
#
pkg_packages_load(){
	alert_msg "${y}Collecting packages to be installed:"
	echo

	typeset -gA MODULE_PACKAGES

	MODULE_PACKAGES=("${(@f)$(
		cat $PACKAGE_LIST |

		sed -E \
			-e 's/#.*//' \
			-e 's/^\s+//' \
			-e 's/\s+$//' \
			-e 's/\s+/ /' \
			-e 's/\[\s+/\[/' \
			-e 's/\s+\]/\]/' |

		grep -v '^$'|

		awk '
			function print_group(){
				if (packages != ""){
					print group
					print(substr(packages,2))
				}
			}

			/^\[[^]]+\]$/{
				if (group != ""){
					print_group()
				}

				sub(/\[/,"",$0)
				sub(/\]/,"",$0)

				group = $0
				packages=""
				next
			}

			{packages = packages " " $0}

			END{
				print_group()
			}
		'
	)}")

	local -U system_pkgs=(
		${=MODULE_PACKAGES[system]}
		${=MODULE_PACKAGES[$OS]}
	)

	local -U core_pkgs=(
		${__CORE_PACKAGES}
		${__CORE_PACKAGES_OS}
	)

	MODULE_PACKAGES[core]=$core_pkgs
	MODULE_PACKAGES[system]=$system_pkgs

	unset "MODULE_PACKAGES[$OS]"

	clear_screen 5
}

pkg_packages_select(){
	pkg_packages_load

	local ignore=(system core)

	local -U all_modules=(system ${${(k)MODULE_PACKAGES}:|ignore})
	local -U req_modules=(${__REQUIRED_MODULES:*all_modules})

	all_modules=($req_modules)
	all_modules+=(${${(k)MODULE_PACKAGES}:|ignore})


	#####################################################
	# If any of the modules are prerequired
	# then preselect them in the menu
	#
	local preselected=()

	if [[ -n $req_modules ]]; then
		preselected=(
			$(
				for i in {1..$#req_modules}; do
					echo $i;
				done
			)
		)
	fi

	#####################################################
	# Create menu list
	#
	local modules=()
	local module

	for module in $all_modules; do
		item="$module;$MODULE_PACKAGES[$module]"

		[[ $#item -gt 54 ]] && item="${(r:50:)item} ..."

		modules+=("$item")
	done

	local selection=()
	local menu_prompt=""

	menu_prompt+="[${g}ENTER: ${n}select] "
	menu_prompt+="[${g}CTRL+A: ${n}all] "
	menu_prompt+="[${g}CTRL+N: ${n}none]   "
	menu_prompt+="[${y}CTRL+O: ${n}end] "
	menu_prompt+="[${y}CTRL+C: ${n}quit]"

	alert_msg "${y}Select group(s) of packages to install:"

	zmenu select selection\
		--width 60 \
		--header "Group;Packages" \
		--selected-color "b" \
		--selected "$preselected" \
		--multy \
		--focus 1 \
		--color 'g y n' \
		--align "r l l" \
		--spaces "1 2 2" \
		--no-bottom-line \
		--prompt "$menu_prompt" \
		$modules || {echo; exit}

	echo

	typeset -gA SELECTED_MODULES

	for i in $selection; do
		SELECTED_MODULES[${modules[$i]%;*}]=1
	done
}


############################
# core function: action
#
pkg_action(){
	local __module=$1
	local __package=${2%/*}
	local __version=${${${(M)2:#*/*}##*/}:-0.0}
	local __store=$3
	local __result__

	if [[ -n $MULTY_VERSION_PACKAGE[$__package] ]]; then
		zpackage $__module action-multy $2 __result__
	else
		zpackage $__module action-single $2 __result__
	fi

	eval "$__store=$__result__"
}

pkg_action_single(){
	local module=$1
	local package=${2%/*}
	local version=${${${(M)2:#*/*}##*/}:-0.0}
	local store=$3

	alert_msg "Checking [$module]" "${package}"
	echo

	local inst_version=$(zpackage $module version $package installed)
	local repo_version=$(zpackage $module version $package repo)
	local need_version=${(j:.:)${(@s:.:)version}[1,2]}

	inst_version=$(pkg_version_normalize $inst_version)
	repo_version=$(pkg_version_normalize $repo_version)

	local action=$(
		pkg_action_define $package $need_version $repo_version $inst_version
	)

	eval "$store=$action"

	clear_screen 5
}

pkg_action_multy(){
	local module=$1
	local package=$2
	local store=$3
	local need=${${${(M)2:#*/*}##*/}:-0.0}

	echo "HA HA HA"
	exit


	######################################################################
	# For some packages, there could be available multiple sources
	# and/or multiple versions. If so, user should be given a list 
	# of sources/versions to choose from (menu).
	#
	# The list of alternatives, will be obtained by executing "provides"
	# command. "provides" command will set following variables:
	#
	#   __action__
	#   __repo__
	#   __installed__
	#   __available__
	#
	#  For __action__ values do following:
	#      select    - select from __available__ list and define action
	#      *         - use given action
	#  
	local __repo__
	local __action__
	local __installed__
	local __available__

	zpackage $module provides $package \
		__action__    \
		__repo__      \
		__installed__ \
		__available__ 


	echo AVAILABLE: ${${(qq)__available__}/#/\\n   }
	echo

	if [[ -n $__action__ ]]; then
		eval "$store=$__action__"
		return
	fi

	local __selected__
	local __version__

	pkg_action_select $package \
		__selected__   \
		__version__    \
		$__available__ 

	echo "Selected: $__selected__"
	echo "Version:  $__version__"

	exit


	# elif [[ $#__available__ -eq 1 ]]; then
	# 	local action=$(
	# 		pkg_action_define $need $__repo__ $__installed__
	# 	)
	#
	# 	eval "$store=$action"
	# 	return
	# fi
}

pkg_action_select(){
	local package=${1%/*};   shift
	local store_selected=$1; shift
	local store_version=$1;  shift

	local options=("$@")
	local selection=1

	echo OPTIONS: ${${(qq)options}/#/\\n   }
	echo

	if [[ $#options -ne 1 ]]; then
		local menu_prompt=""

		menu_prompt+="[${g}ENTER: ${n}select] "
		menu_prompt+="[${y}CTRL+C: ${n}quit]"

		zmenu select selection\
			--width 60 \
			--selected-color "w" \
			--selected "$preselected" \
			--focus 1 \
			--color 'g y g b' \
			--align "r l l" \
			--spaces "1 3 3" \
			--no-bottom-line \
			--title "${b}Select \"nodejs\" version to install:"\
			--header "From;Packaged by;Version" \
			--prompt "$menu_prompt" \
			$options

		echo
	fi

	local selected=(${(s:;:)options[$selection]})
	local from=$selected[1]
	local version=$selected[3]

	local pkg="${package}/${from}-${version}"

	echo Selection: $selection
	echo Selected:  ${(qq)selected}
	echo From:      $from
	echo Version:   $version
	echo Pkg:       $pkg
	echo

	eval "$store_version=$version"
	eval "$store_selected=$pkg"
}

pkg_action_define(){
	local package=$1
	local need_version=$2
	local repo_version=$3
	local inst_version=$4
	local action

	{
		echo "Installed: $inst_version"
		echo "Repo:      $repo_version"
		echo "Need:      $need_version"
	} >&2

	if [[ -z inst_version ]] || [[ $inst_version -eq 0 ]]; then
		if [[ -z $repo_version ]] || [[ $repo_version -eq 0 ]]; then
			action=missing
		elif ! pkg_version_newer $repo_version $need_version; then
			action=old:$repo_version:$need_version
		else
			action=install:$package
		fi

	else
		if [[ -z $repo_version ]]; then
			action=keep
		elif [[ $inst_version = $repo_version ]]; then
			action=keep
		elif ! pkg_version_newer $repo_version $inst_version; then
			action=keep
		else
			action=update:$package
		fi

	fi

	echo $action

	clear_screen 3 >&2
}


############################
# core function: version
#
pkg_version_newer(){
	local have=$1
	local need=$2

	have_val=$((${have%.*} * 10000 + ${have#*.}))
	need_val=$((${need%.*} * 10000 + ${need#*.}))

	[[ $need_val -gt $have_val ]]  && return 1

	return 0
}

pkg_version_normalize(){
	echo $1 | awk '
		/^[0-9]+\.[0-9]+.*/{
			split($1,parts,"\\.")
			# printf("%-25s %-20s A:%d.%d\n",$1, $2, parts[1], parts[2])

			printf("%d.%d\n", parts[1], parts[2])
			next
		}

		/^[0-9]+[.:][0-9]+\.[0-9]+.*/{
			split($1,parts,"[.:]")
			# printf("%-25s %-20s B:%d.%d\n",$1, $2, parts[1] * 100 + parts[2], parts[3])

			printf("%d.%d\n", parts[1] * 100 + parts[2], parts[3])
			next
		}

		/^[0-9]+[.:][0-9]+.*/{
			split($1,parts,"[.:]")
			# printf("%-25s %-20s C:%d.%d\n",$1, $2, parts[1], parts[2])

			printf("%d.%d\n", parts[1], parts[2])
			next
		}

		/^[0-9]+-[0-9]+.*/{
			split($1,parts,"-")
			# printf("%-25s %-20s D:%d.%d\n",$1, $2, parts[1], parts[2])

			printf("%d.%d\n", parts[1], parts[2])
			next
		}

		/^[0-9]+$/{
			# printf("%-25s %-20s E:%d.%d\n",$1, $2, $2, 0)
			printf("%d.00\n", $1)
			next
		}

		{
			print "0.0"
			next
		}
	'
}


############################
# core function: count
#
pkg_count(){
	local module=$1; shift
	local action=$1; shift


	if [[ $action = success ]]; then
		pkg_count_success $1 $2 $3
		return 0

	elif [[ $action = fail ]]; then
		pkg_count_fails $1 $2 $3
		return 1

	elif [[ $action -eq 0 ]]; then
		pkg_count_success $1 $2 "${3}ed"
		return 0

	else
		pkg_count_fails $1 $2 "failed to ${3}"
		return 1
	fi
}

pkg_count_success(){
	local pkg="$1:$2"

	[[ ${+__INSTALLED_PKGS[$pkg]} -eq 1 ]] && return

	INSTALLED_PACKAGES+=("$1;$2;${3//ee/e}")

	__INSTALLED_PKGS[$pkg]=1
}

pkg_count_fails(){
	local pkg="$1:$2"

	[[ ${+__FAILED_PKGS[$pkg]} -eq 1 ]] && return

	FAILED_PACKAGES+=("$1;$2;$3")

	__FAILED_PKGS[$pkg]=1
}


pkg_create_local_dir(){
	[[ -d $__NVIM_SHARE ]] || mkdir -p $__NVIM_SHARE || return 1

	return 0
} 

pkg_create_modules_dir(){
	[[ -d $__NVIM_BRICKS ]] || mkdir -p $__NVIM_BRICKS || return 1

	return 0
}

pkg_create_ruby_dir(){
	local ruby_bin=$__NVIM_BRICKS/ruby/bin

	[[ -d $ruby_bin ]] || mkdir -p $ruby_bin || return 1

	return 0
}
