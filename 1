#!/usr/bin/zsh

MULTY_VERSION_PACKAGE[nodejs]="YES"
NODE_KEEP_EXISTING=1

 __NODE_MIN_VERSION=18.0


#############################################
# node packages functions
#
system_pkg_install_nodejs_module(){
	zpackage system install nodejs

	return $?
}

system_pkg_doinstall_nodejs(){
	local pkg=${1%/*}
	local version=${1#*/}
	local from=${version%-*}

	version=${version#*-}

	if [[ $from = repo ]] then
		system_pkg_doinstall nodejs
		return $?
	fi

	local inst_version=$(zpackage system version nodejs installed)
	inst_version=$(pkg_version_normalize $inst_version)

	local uninstalled=0

	if [[ $inst_version -gt 0 ]]; then
		cat <<-EOF | alert_box --expand
		To install new version of nodejs from web,
		we have to uninstall existing package
		EOF

		yesno_question "Do you want to procede with installation of nodejs [Y/n]:" Y

		[[ $? -ne 0 ]] && return 1
		
		alert_msg "Uninstall [$OS]" nodejs
		echo

		zpackage system uninstall  nodejs
		zpackage system count $? nodejs uninstall || return 1

		uninstalled=1
	fi

	register_nodejs_org $version

	local retval=$?

	[[ $retval -eq 1 ]] && return 1

	if [[ $retval -eq 2 ]]; then
		
		if [[ $uninstalled -eq 1 ]]; then
			yesno_question "Do you want to reinstall previously removed nodejs [Y/n]:" Y
			[[ $? -ne 0 ]] && return 1
		else
			return 1
		fi
	fi

	system_pkg_doinstall nodejs  || return 1

	if ! hash npm 2>/dev/null; then
		system_pkg_doinstall npm || return 1
	fi
}

system_pkg_version_nodejs(){
	local pkg=$1
	local vtype=$2


	if [[ $vtype = web ]] then
		local current=$(
			curl -fsSL https://deb.nodesource.com/setup_current.x 2>/dev/null|
			grep 'NODEREPO="' |
			sed -e 's/NODEREPO="//' -e 's/"//g'  -e 's/node_//'
		)

		for i in {16..${current%.*}}; do
			curl -fsSL "https://deb.nodesource.com/setup_${i}.x" 2>/dev/null|
			grep 'NODEREPO="' |
			sed -e 's/NODEREPO="//' -e 's/"//g'  -e 's/node_//'
		done

	else
		system_pkg_version $pkg $vtype

	fi
}

system_pkg_action_multy_nodejs(){
	local package=${1%/*}
	local need_version=${${${(M)1:#*/*}##*/}:-0.0}
	local store=$2

	[[ -z $need_version    ]] && need_version=$__NODE_MIN_VERSION
	[[ $need_version = 0.0 ]] && need_version=$__NODE_MIN_VERSION

	alert_msg "Checking [$OS]" "nodejs $need_version"


	############################################################
	# get local repo version, already installed version and
	# versions available from "nodej.org" web site.
	#
	local repo_version=$(zpackage system version nodejs repo)
	local inst_version=$(zpackage system version nodejs installed)
	local web_versions=($(zpackage system version nodejs web))


	############################################################
	# check source of currently installed version is it "OS"
	# package, or the one downloaded from "nodejs.org" web.
	#
	# Avalilabel "nodejs" package, can be one from "OS"
	# repositorie or from "nodejs.org", since later could be
	# added to the list of repositories.
	#
	local repo_source=$(
		apt show nodejs 2>/dev/null |
		awk '/APT-Sources.*nodesource\.com/{print "nodejs.org"}'
	)

	[[ -z $repo_source ]] && repo_source=$DISTRO

	{
		echo "NEED VERSION: $need_version"
		echo "REPO VERSION: $repo_version"
		echo "INST VERSION: $inst_version"
		echo "WEB  VERSION: $web_versions"
	} >/dev/null


	############################################################
	# Collect versions of "nodejs.org" web, which are higher
	# then currently installed version and higher than "requested".
	# If any, they will be offered as possible options to select from.
	#
	# While we compare to "repo" version of nodejs, this can 
	# be one from "OS" repositorie or from "nodejs.org" since
	# later could be added to the list of repositories. See above.
	#
	local remote_versions=()
	local pkg_version

	for pkg_version in ${web_versions/%.x/.0}; do
		if
			pkg_version_newer $pkg_version $repo_version &&
			pkg_version_newer $pkg_version $need_version
		then
			remote_versions+=(${pkg_version/%.0/.x})
		fi
	done


	############################################################
	# Create a list of provided versions. Only add those which
	# fullfill needed version miminum.
	#
	local provided=()

	if
		pkg_version_newer $repo_version $need_version &&
		pkg_version_newer $repo_version $inst_version
	then
		if [[ $repo_version = $inst_version ]]; then
			provided=("repo;r:$repo_source (installed);$repo_version")
		else
			provided=("repo;r:$repo_source;$repo_version")
		fi
	fi

	for pkg_version in $remote_versions; do
		provided+=("web;nodejs.org;${pkg_version}")
	done

	clear_screen 4


	##########################################################################
	# DETERMINE ACTION TO TAKE
	##########################################################################

	############################################################
	# If no "higher" versions are available from "nodejs.org"
	# we will keep "repo" version ("OS" or "nodejs.org")
	#
	if [[ -z $remote_versions ]]; then
		local pkg=$package/repo

		local action=$(
			pkg_action_define $pkg $need_version $repo_version $inst_version
		)

		eval "$store=$action"
		return
	fi

	############################################################
	# No repo version available
	#
	if [[ $#remote_versions -eq $#provided ]]; then
		cat <<-EOF
			nodejs with version higher or equal to requested one
			($need_version) is only available from nodejs.org:
			
			   ${n}available versions: ${g}$remote_versions
		EOF

	############################################################
	# Repo and remote versions avaliable
	#
	else

		cat <<-EOF
			Version(s) availabel from "nodejs.org" site is/are higher
			than version(s) available/installed from local repo:
			
			   ${n}repo:         ${g}$repo_version

			   ${n}nodejs.org:   ${g}$remote_versions
		EOF
	fi | alert_box --left --expand --offset 3


	############################################################
	# If only one remote version available, ask directly if
	# user wants to install that version.
	#
	if [[ $#remote_versions -eq 1 ]]; then
		yesno_question 'Do you want to install from "nodejs.org" [Y/n]:' Y

		if [[ $? -eq 0 ]]; then
			local web_version=${remote_versions/.x/.0}
			local pkg=$package/web-$remote_versions

			local action=$(
				pkg_action_define $pkg $need_version $web_version $inst_version
			)

			eval "$store=$action"
			return
		else
			local pkg=$package/repo

			local action=$(
				pkg_action_define $pkg $need_version $repo_version $inst_version
			)

			eval "$store=$action"
			return
		fi
	fi


	############################################################
	# From menum select one of available options
	#
	local selection=()
	local menu_prompt=""

	menu_prompt+="[${g}ENTER: ${n}select] "
	menu_prompt+="[${y}CTRL+C: ${n}quit]"

	zmenu select selection\
		--width 60 \
		--selected-color "w" \
		--selected "$preselected" \
		--focus 1 \
		--color 'g y n b' \
		--align "r l l" \
		--spaces "1 3 3" \
		--no-bottom-line \
		--title "${b}Select \"nodejs\" version to install:"\
		--header "From;Packaged by;Version" \
		--prompt "$menu_prompt" \
		$provided

	echo

	if [[ -z $selection ]]; then
		eval "$store=skipp"
		return
	fi

	local selected=(${(s:;:)provided[$selection]})
	local from=$selected[1]
	local version=${selected[3]/.x/.0}
	local pkg=$package/$from-$selected[3]

	local action=$(
		pkg_action_define $pkg $need_version $version $inst_version
	)

	eval "$store=$action"
}

register_nodejs_org(){
	local version=$1
	local repo=$(system_pkg_version_nodejs repo)

	[[ $repo = $version ]] && return 0

	alert_msg "Registering repo for nodejs version" "$version"
	echo

	sudo_init || return 1

	local errors=$(
		curl -fsSL https://deb.nodesource.com/setup_$version |
		sudo -E bash -  |
		tee >(cat 1>&2) |
		grep '## Your distribution.*is not.*supported'
	)

	[[ -z $errors ]] && return 0

	{
		echo "We cant install selected nodejs version ($version) since"
		echo "this version of operating system is not supported."
		echo
		echo "${r}Error message:${n}"
		echo
		echo $errors 
	} | alert_box --par --left --expand --offset 2

	return 2
}
