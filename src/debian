#!/usr/bin/zsh

OS_NAME=REDHAT-X

sys_package_version(){
	local vtype=$1
	local pkg=$2

	case $vtype in
		installed)
			dpkg -l $pkg 2>/dev/null | grep '^i' | awk '{print $3}'
			;;
		repo)
			apt show $pkg 2>/dev/null | grep '^Version:' | sed -e 's/Version: //'
			;;
	esac
}

install_python(){
	setup_python python3 python3-pip python3-venv
}

install_luarocks(){
	[[ ${+LUA_BIN} -eq 1 ]] && return

	LUA_BIN=1
	install_pkg system $package/3.0 || LUA_BIN=0

	[[ $LUA_BIN -eq 0 ]] && return

	install_pkg system \
		gcc \
		make \
		cmake \
		build-essential
}

install_perl(){
	[[ ${+PERL_BIN} -eq 1 ]] && return

	PERL_BIN=1
	install_pkg system perl || PERL_BIN=0
}

install_ruby(){
	[[ ${+RUBY_BIN} -eq 1 ]] && return

	RUBY_BIN=1
	install_pkg system ruby ruby-dev  || RUBY_BIN=0

}

install_rust(){
	[[ ${+RUST_BIN} -eq 1 ]] && return

	RUST_BIN=1
	install_pkg system cargo || RUST_BIN=0
}

install_neovim(){
	install_neovim_package deb
}

node_latest(){
	if [[ $1 = version ]] then
		curl -fsSL https://deb.nodesource.com/setup_current.x |
		grep 'NODEREPO="' |
		sed -e 's/NODEREPO="//' -e 's/"//g'  -e 's/node_//'

		return
	fi

	if [[ $1 = repo ]] then
		apt-cache policy |
		grep -E 'https://deb\.nodesource\.com/node_.+\.x' |
		sed -E -e 's;.+ https://deb.nodesource.com/;;' -e 's;(node_.+.x) .*;\1;'

		return
	fi
}

install_node_latest(){

	# retrieve version of lastest nodejs debian package
	# on github
	#
	local latest=$(node_latest version)
	local repo=$(node_latest repot)

	if [[ $repo != $latest ]]; then
		show_alert "Registering repo for latest" "nodejs"
		curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -
	fi

	install_pkg system nodejs
}

install_node(){
	[[ ${+NODE_BIN} -eq 1 ]] && return

	NODE_BIN=1
	show_alert "Checking [$OS]" nodejs

	local repo_version=$(sys_package version repo nodejs)
	local inst_version=$(sys_package version installed nodejs)
	local remote_version=$(node_latest version)
	local latest_version

	repo_version=$(normalize_version $repo_version)
	inst_version=$(normalize_version $inst_version)
	latest_version=${remote_version/%.x/.0}

	local nstatus="installed"
	local to_install=none

	# clear_screen 4

	if [[ $repo_version -gt $inst_version ]] then
		to_install=repo

		if [[ $latest_version -gt $repo_version ]] then
			cat <<-EOF | alert_box
				${y}
				Version availabel from ${n}nodejs.org ${y}site is higher
				than version available in local repo:

					 ${n}repo:         ${g}$repo_version
					 ${n}nodejs.org:   ${g}$remote_version


			${y}Installed version SHOULD NOT be less than ${g}$_NODE_MIN_VERSION
		  ${n}
			EOF

			yesno_question "Do you want to install version from 'nodejs.org' [Y/n]:" Y

			[[ $? -eq 0 ]] && to_install=remote
		fi

	elif [[ $latest_version -gt $inst_version ]] then
		cat <<-EOF | alert_box
			${y}
			Version availabel from ${n}nodejs.org ${y}site is higher
			than installed version (and local repo version):

				 ${n}repo:         ${g}$repo_version
				 ${n}installed:    ${g}$inst_version
				 ${n}nodejs.org:   ${g}$remote_version


			${y}Installed version SHOULD NOT be less than ${g}$_NODE_MIN_VERSION
			${n}
		EOF

		yesno_question "Do you want to install version from 'nodejs.org' [Y/n]:" Y

		[[ $? -eq 0 ]] && to_install=remote
	fi

	if [[ $to_install = "remote" ]] then
		install_node_latest
	elif [[ $to_install = "repo" ]] then
		install_pkg system nodejs
		install_pkg system npm
	fi

	# echo "Repo:   $repo_version"
	# echo "Inst:   $inst_version"
	# echo "Latest: $remote_version"
	#
	# echo "Repo:   $repo_version"
	# echo "Inst:   $inst_version"
	# echo "Latest: $latest_version"

	# exit 1
}

update_system(){
	[[ $UPGRADED -eq 1 ]] && return

	UPGRADED=1

	return

	echo
	sudo -v

	show_alert "Updating" "system package list"

	sudo apt-get -q update >/dev/null

	local test_run=$(apt-get -s upgrade)

	local upgradable=($(
		echo $test_run |
		awk '
			/^[^ \t]+/ {flag = 0}
			flag {print}
			/The following packages will be upgraded:/ {flag = 1}
		'
	))

	local keptback=($(
		echo $test_run |
		awk '
			/^[^ \t]+/ {flag = 0}
			flag {print}
			/The following packages have been kept back:/ {flag = 1}
		'
	))

	AUTO_REMOVE_PKGS=($(
		echo $test_run |
		awk '
			/^[^ \t]+/ {flag = 0}
			flag {print}
			/automatically installed and .* longer required:/ {flag = 1}
		'
	))


	CLEARED=0

	if [[ -n $upgradable ]]; then
		[[ $CLEARED -eq 0 ]] && clear
	       	CLEARED=1

		echo
		show_alert "ALERT" "Your system needs upgrade !!!"
		echo 

		if yesno_question "Do you want to upgrades the system [y/N]:" N; then
			sudo apt-get upgrade -qq --yes
			echo
		else
			exit
		fi

	fi

	if [[ -n $keptback ]]; then
		[[ $CLEARED -eq 0 ]] && clear
	       	CLEARED=1

		{
			echo "Following packages are kept back:"
			echo
			echo ${(j:\n:)${(@)keptback/#/   ${n}}}${y}
			echo
			echo "They have to be installed manualy!"
		} | sed -e 's/^/   /' | alert_box --expand --left

		if yesno_question "Do you want to install kept back packages [y/N]:" N; then
			sudo apt-get install -qq --yes $keptback
			echo
		else
			exit
		fi
	fi

	UPGRADED=1
}
