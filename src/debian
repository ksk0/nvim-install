#!/usr/bin/zsh

OS_NAME=REDHAT-X

sys_package_version(){
	local vtype=$1
	local pkg=$2

	case $vtype in
		installed)
			dpkg -l $pkg 2>/dev/null | grep '^i' | awk '{print $3}'
			;;
		repo)
			apt show $pkg 2>/dev/null | grep '^Version:' | sed -e 's/Version: //'
			;;
	esac
}

install_python(){
	setup_python python3 python3-pip python3-venv # cmake
}

install_luarocks(){
	setup_luarocks gcc make cmake build-essential
}

install_ruby(){
	setup_ruby ruby-dev make gcc
}

install_perl (){
	setup_perl make gcc
}

install_rust(){
	setup_rust cargo make
}

install_neovim(){
	download_deb_pkg

 	register_neovim_app nvim vi  N
 	register_neovim_app nvim vim Y

	echo
}

uninstall_pkg(){
	local package=$1

	local autoremove=($(
		apt-get -s remove $package |
		awk '
			/^[^ \t]+/ {flag = 0}
			flag {print}
			/automatically installed and .* longer required:/ {flag = 1}
		'
	))

	sudo apt-get --yes remove $package || return 1
	sudo apt-get --yes autoremove || return 1

	return 0
}

nodejs_org_version(){
	if [[ $1 = web ]] then
		local current=$(
			curl -fsSL https://deb.nodesource.com/setup_current.x |
			grep 'NODEREPO="' |
			sed -e 's/NODEREPO="//' -e 's/"//g'  -e 's/node_//'
		)

		for i in {16..${current%.*}}; do
			curl -fsSL "https://deb.nodesource.com/setup_${i}.x" |
			grep 'NODEREPO="' |
			sed -e 's/NODEREPO="//' -e 's/"//g'  -e 's/node_//'
		done

		return
	fi

	if [[ $1 = repo ]] then
		apt-cache policy |
		grep -E 'https://deb\.nodesource\.com/node_.+\.x' |
		sed -E -e 's;.+ https://deb.nodesource.com/;;' -e 's;node_(.+\.x) .*;\1;'

		return
	fi
}

register_nodejs_org(){
	local version=$1
	local repo=$(nodejs_org_version repo)

	if [[ $repo != $version ]]; then
		alert_msg "Registering repo for latest" "nodejs"
		curl -fsSL https://deb.nodesource.com/setup_$version | sudo -E bash -
	fi
}

install_node(){
	[[ ${+NODE_BIN} -eq 1 ]] && return

	alert_msg "Checking [$OS]" nodejs

	local repo_version=$(sys_package version repo nodejs)
	local inst_version=$(sys_package version installed nodejs)
	local web_version=($(nodejs_org_version web))
	local remote_version=()

	local repo_source=$(
		apt show nodejs 2>/dev/null |
		grep 'APT-Sources.*nodesource\....'
	)

	[[ -n $repo_source ]] && repo_source='r:nodejs.org' || repo_source='distro'

	repo_version=$(normalize_version $repo_version)
	inst_version=$(normalize_version $inst_version)

	local version

	for version in ${web_version/%.x/.0}; do
		if is_newer $version $repo_version; then
			remote_version+=(${version/%.0/.x})
		fi
	done

	clear_screen 4

	if [[ -z $remote_version ]]; then
		install_pkg system nodejs || return

		if [[ $repo_version = distro ]]; then
			install_pkg system npm || return
		fi

		NODE_BIN=1
		install_pkg node npm

		return
	fi

	cat <<-EOF | sed -e 's/^/    /' | alert_box --left
		${y}
		Version(s) availabel from ${n}nodejs.org ${y}site is higher than version
		available in local repo:

			 ${n}repo:         ${g}$repo_version
			 ${n}nodejs.org:   ${g}$remote_version

	${y}If you want, you can choose to install newer version of ${n}nodejs${y}.
	${n}
	EOF

	local install_what="repo"
	local install_version

	if [[ $#remote_version -eq 1 ]]; then
		yesno_question "Do you want to install latest version from 'nodejs.org' [Y/n]:" Y

		if [[ $? -eq 0 ]]; then
			install_what="web"
			install_version=$remote_version
		fi

	else
		local pkgs=("repo;$repo_source;$repo_version")
			
		pkgs+=(${${(@)remote_version/%.0/.x}/#/web;nodejs.org;})

		echo PKGS:${(qq)pkgs}

		local selection=()
		local menu_prompt=""

		menu_prompt+="[${g}ENTER: ${n}select] "
		menu_prompt+="[${y}CTRL+C: ${n}quit]"

		zmenu select selection\
			--width 60 \
			--selected-color "r" \
			--selected "$preselected" \
			--focus 1 \
			--color 'g y n b' \
			--align "r l l" \
			--spaces "1 3 3" \
			--no-bottom-line \
			--title "${b}Select \"nodejs\" version to install:"\
			--header "From;Source;Version" \
			--prompt "$menu_prompt" \
			$pkgs

		echo

		[[ -z $selection ]] && exit

		local selected=(${(s:;:)pkgs[$selection]})

		install_what=$selected[1]
		# install_source=$selected[2]
		install_version=$selected[3]
	fi

	if [[ $install_what = "web" ]] then
		if [[ $inst_version -gt 0 ]]; then
			cat <<-EOF | alert_box --expand
			To install new version of nodejs from web,
			we have to uninstall existing package
			EOF

			yesno_question "Do you want to procede with installation of nodejs [Y/n]:" Y

			if [[ $? -ne 0 ]]; then
				install_pkg system nodejs || return

				NODE_BIN=1
				install_pkg node npm

				return
			fi
			
			alert_msg "Uninstall [$OS]" nodejs
			echo

			sys_package uninstall nodejs
			count_action $? system nodejs uninstall || return
		fi

		register_nodejs_org $install_version
		install_pkg system nodejs || return

	elif [[ $install_what = "repo" ]] then
		install_pkg system nodejs || return

	fi

	if ! hash npm 2>/dev/null; then
		# echo "NEED TO INSTALL NPM"
		install_pkg system npm || return
	else
		# echo "NPM IS HERE"
	fi

	NODE_BIN=1

	install_pkg node npm
}

update_system(){
	[[ $UPGRADED -eq 1 ]] && return || UPGRADED=1

	cat <<-EOF | alert_box --expand
		${n}Before installing/updating any system packages,
		${n}ystem should be upgraded.

		We can update and if necesary upgrade within the script.
	EOF

	yesno_question "Do you want to update the package database [Y/n]:" Y

	if [[ $? -eq 0 ]] && update_system_database

	local test_run=$(apt-get -s upgrade)

	local upgradable=($(
		echo $test_run |
		awk '
			/^[^ \t]+/ {flag = 0}
			flag {print}
			/The following packages will be upgraded:/ {flag = 1}
		'
	))

	local keptback=($(
		echo $test_run |
		awk '
			/^[^ \t]+/ {flag = 0}
			flag {print}
			/The following packages have been kept back:/ {flag = 1}
		'
	))

	local autoremove=($(
		echo $test_run |
		awk '
			/^[^ \t]+/ {flag = 0}
			flag {print}
			/automatically installed and .* longer required:/ {flag = 1}
		'
	))

	local modified=0

	if [[ -z $upgradable ]]; then
		echo
		alert_box --expand "No package(s) need upgrade !!!"

	else
		alert_box --expand "Your system needs upgrade !!!"

		if yesno_question "Do you want to upgrades the system [y/N]:" N; then
			alert_msg "${y}Upgrading system packages ..."
			echo

			sudo apt-get upgrade -qq --yes
			echo

			modified=1
		else
			exit
		fi

	fi

	if [[ -n $keptback ]]; then
		{
			echo "Following packages are kept back:"
			echo
			echo ${(j:\n:)${(@)keptback/#/   ${n}}}${y}
			echo
			echo "They have to be installed manualy!"
		} | sed -e 's/^/   /' | alert_box --expand --left

		if yesno_question "Do you want to install kept back packages [y/N]:" N; then
			alert_msg "${y}Installing kept back packages ..."
			echo

			sudo apt-get install -qq --yes $keptback
			echo

			modified=1
		else
			exit
		fi
	fi

	if [[ -n $autoremove ]]; then
		{
			echo "Following packages can be removed, since they are not needed:"
			echo
			echo ${(j:\n:)${(@)autoremove/#/   ${n}}}
			echo
			echo "To remove them run:"
			echo "   ${n}apt autoremove${y}"
		} | sed -e 's/^/   /' | alert_box --expand --left
	fi

	if [[ $modified -eq 1 ]]; then
		alert_box --expand "Run installation script again!"

		echo
		exit
	fi
}

update_system_database(){
	alert_msg "Updating" "system package list"
	echo

	sudo apt-get -q update >/dev/null
}
