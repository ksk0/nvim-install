#!/usr/bin/zsh

OS_NAME=REDHAT-X

# sys_package(){
# 	cmd=$1; shift
#
# 	case $cmd in
# 		action)   sys_package_action   "$@";;
# 		provided) sys_package_provided "$@";;
# 		version)  sys_package_version  "$@";;
# 		install)  sys_package_install  "$@"; return $?;;
# 	esac
# }
#
# sys_package_action(){
# 		local __store=$1
# 		local __action
# }

sys_package_version(){
	local vtype=$1
	local pkg=$2

	if [[ $vtype = installed ]] then
		local version=$(sys_package_version local $1)
		[[ -n $version ]] && echo $version && return

		local packages=("${(@f)$(sys_package_provided $pkg)}")
		local package

		for package in $packages; do
			version=$(sys_package_version local $package)
			[[ -n $version ]] && echo $version && return
		done

	elif [[ $vtype = repo ]] then
		dnf info $pkg 2>/dev/null |
		awk  '
			/^Version / {ver=$3}
			/^Release / {rel=$3}

			END {if (ver != "") print ver "-" rel}
		'

	elif [[ $vtype = local ]] then
		rpm -qi $pkg |
		awk  '
			/^Version / {ver=$3}
			/^Release / {rel=$3}

			END {if (ver != "") print ver "-" rel}
		'

  fi
}

sys_package_provided(){
	dnf -q provides $1 2>/dev/null |
	awk '
		/^(Repo|Match|Provide|$)/{next}
		{print $1}
	'
}

# sys_package_install(){
# 	local width=$(tput cols)
#
# 	if [[ $width -gt 80 ]] then
# 		stty cols 80
# 	fi
#
# 	sudo dnf install -y $1
# 	local result=$?
#
# 	if [[ $width -gt 80 ]] then
# 		stty cols $width
# 	fi
#
# 	return $result
# }

install_python(){
	setup_python python3 python3-pip python3-virtualenv
}

install_neovim(){
	install_neovim_package app
}


update_system(){
	[[ $UPGRADED -eq 1 ]] && return

  echo "Updating system $OS_NAME"
  UPGRADED=1
}
